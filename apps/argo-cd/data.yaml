tags:
  - CI/CD
title: "ArgoCD"
summary: "Declarative, GitOps continuous delivery tool for Kubernetes."
logo: "https://argo-cd.readthedocs.io/en/stable/assets/logo.png"
created: "2025-03-12T08:16:55Z"
description: |
  Argo CD is an open-source tool for implementing GitOps in Kubernetes. It automates the deployment and lifecycle management of applications by continuously synchronizing the desired state declared in a Git repository with the live state in the cluster. k0rdent integration:

  - Centralized Management: Manage Argo CD instances and application deployments across multiple clusters from the K0rdent control plane. 
  - Simplified Deployment: k0rdent can automate the deployment and configuration of Argo CD in your clusters, reducing manual effort.
  - Policy-Driven Deployments: Leverage k0rdent's policy engine to enforce security and compliance policies for your Argo CD deployments and application configurations.
support_link: https://akuity.io/security-hardened-argo-cd
charts:
  - name: argo-cd
    versions: ['7.8.0']
deploy_code: |
  ~~~yaml
  apiVersion: k0rdent.mirantis.com/v1beta1
  kind: ClusterDeployment
  # kind: MultiClusterService
  ...
    serviceSpec:
      services:
        - template: argo-cd-7-8-0
          name: argo-cd
          namespace: argo-cd
  ~~~
doc_link: https://argo-cd.readthedocs.io/en/stable/
examples: |
  Install service templates:
  ~~~bash
  helm install argo-cd oci://ghcr.io/k0rdent/catalog/charts/kgst --set "chart=argo-cd:7.8.0" -n kcm-system
  helm install ingress-nginx oci://ghcr.io/k0rdent/catalog/charts/kgst --set "chart=ingress-nginx:4.11.5" -n kcm-system
  ~~~

  #### Deploy MultiClusterService with web UI
  ~~~yaml
  apiVersion: k0rdent.mirantis.com/v1beta1
  kind: MultiClusterService
  metadata:
    name: argo-cd
  spec:
    clusterSelector:
      matchLabels:
        group: demo
    serviceSpec:
      services:
      - template: argo-cd-7-8-0
        name: argo-cd
        namespace: argo-cd
        values: |
          argo-cd:
            server:
              ingress:
                enabled: true
                ingressClassName: nginx
                hostname: 'argocd.example.com'
                annotations:
                  nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      - template: ingress-nginx-4-11-5
        name: ingress-nginx
        namespace: argo-cd
        values: |
          ingress-nginx:
            controller:
              service:
                annotations:
                  service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
              hostPort:
                enabled: true
  ~~~

  You can now access your ArgoCD web UI at `argocd.example.com`.
